Creating a playable file with dirac_encoder:
dirac_encoder -width 320 -height 240 -cformat YUV422P \
	      -iwlt_filter LEGALL5_3 -num_L1 0 -lossless \
	      -use_vlc -wlt_depth 4 <in> <out>


Creating a playable file with schroenc:
gst-launch videotestsrc ! schroenc intra_wavelet=1 \
	    enable_noarith=true transform_depth=4  \
	    gop_structure=1 rate_control=3 ! \
	     filesink location=test.drc

Actually -wlt_depth is arbitrary, because the decoder does
just as fine with higher dephts.

Hypotheses for the spatial partitioning error:
* Incorrect partition size calculation (likely!)	
* Incorrect quantization calculation  

Note that error does not display when encoded with schroenc.
My hypothesis is that schroenc partitions the image differently from
dirac_encoder. That suggests that partition size calculation is
(still) wrong.

On the implementing of a Dirac plugin for jst: 
Basically, you have to create to pads, a Sink and a Src,
both subclasses of Pad(), to do the actual work of the plugin.
Then, as dirac is supposed to be muxed by Ogg, implement the 
OggPayload interface, which is basically an interface to the
OggDemux plugin.	  
   
The plan for subband decoding:
Subbands should decode into a large short[] array which can
be transformed into the final output picture. 

Spatial partitioning:
Currently, the bounds of the block in which to decode are precalculated,
and then the block is filled with values from decodeSint() according to
the striding logic. I'm pretty confident the striding logic works; I'm
not so confident the precalculating logic works.

As for colour: visual inspection suggests that the colour bands
are decoded incorrectly even in the no-spatial-partitioning case.

Colour conversion should be much faster. This is probably doable
by changing to integer arithmetic and by not using temporary arrays
(or matrix multiplication).

On cortado again:
I've added SchroDec() to the list of plugins in OggDemux, and
implemented isType(Packet) so cortado should recognize ogg dirac
streams. I'm not sure that will be quite enough because the cortado
player seems to be hardwired on vorbis/theora.


<ds> one thing that might not be clear from the SchroMotion code -- after the stream is parsed, all motion rendering is done at the block level
 yes, mv-precision=0
<brrt> ok
<ds> also look at motion-block-size and motion-block-overlap
 size: 0,1,2,3 is default,small,medium,large
 overlap: 0,1,2,3 is default,none,about half, and full
 "medium" translates into 8x8 for SD, 12x12 for HD720, etc.


The current queue's pop() method does not preserve coded order.
This could trigger a bug in which reference pictures are not added
to the reference queue before pictures are loaded. That's why I'm going to 
rewrite the queue.    

On the account of me not entirely getting SchroMotion I'm going to do
part of it my way in another branch.
