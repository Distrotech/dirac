#!/usr/bin/env python
# -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

playback = 1

#file = '/home/ds/public_html/dude_clip.mpg'
#file = '/home/ds/vob/mulholland_clip.mpg'
#file = '/home/ds/vob/luke_clip.mpg'
#file = '/home/ds/vob/x3_clip.mpg'
file = '/home/ds/media/7.vob'
#file = '/home/ds/vob/curb_your_enthusiasm.1.vob'
seek_time = 0
length = 28
fps = 24
audiochan = 0
rate_control = 1
psnr = 30
bitrate = 3000000
quant_engine = 0
intra_wavelet=0
#transform_depth=4

#file = '/mnt/wallace/home/ds/spirited_away.1.vob'
#seek_time = 10
#length = 10
#fps = 24
#audiochan = 0

#file = '/mnt/wallace/home/ds/curb_your_enthusiasm.1.vob'
#seek_time = 10
#length = 10
#fps = 30
#audiochan = 0

# "I can no longer sit back and allow..."
#file = 'dr_strangelove.1.vob'
#seek_time = 1045
#length = 28
#fps = 24
#audiochan = 3

# Credits on moving background
#file = '/mnt/wallace/home/ds/dr_strangelove.1.vob'
#seek_time = 90
#length = 25
#fps = 24
#audiochan = 1

# global motion.  Playback fails
#file = '/mnt/wallace/home/ds/x3.1.vob'
#seek_time = 29
#length = 15
#fps = 24
#audiochan = 2

# marvel logo
#file = '/mnt/wallace/home/ds/x3.1.vob'
#seek_time = 18
#length = 10
#fps = 24
#audiochan = 0

# lincoln tunnel
#file = '/mnt/wallace/home/ds/ghost_dog.1.vob'
#seek_time = 285
#length = 12
#fps = 24
#audiochan = 0

# blade runner
#file = '/home/ds/blade_runner.vob'
#seek_time = 556
#length = 30
#fps = 24
#audiochan = 0



import sys

import gobject
gobject.threads_init()

import pygst
pygst.require('0.10')
import gst


mainloop = gobject.MainLoop();

class Moo:
    def __init__(self,suffix):
        self.suffix = suffix;
        self.audio_channel = 0;
        self.got_video = 0;
        self.bin = gst.parse_launch('filesrc name=source ! ' +
                'decodebin name=dbin '
                #'dbin.src0 ! ' +
                #'  mpeg2dec name=seeker ! ' +
                #'  ffmpegcolorspace ! ' +
                #'  xvimagesink '
                #'dbin.src1 ! ' +
                #'  a52dec ! ' +
                #'  audioconvert ! ' +
                #'  alsasink'
                );

        self.filesrc = self.bin.get_by_name('source');
        self.filesrc.set_property('location', file);

        bus = self.bin.get_bus();
        bus.enable_sync_message_emission();
        bus.add_signal_watch();
        bus.connect('sync-message::element', self.on_sync_message);
        bus.connect('message', self.on_message);

        dbin = self.bin.get_by_name('dbin');
        dbin.connect('new-decoded-pad', self.demux_pad_added);

        self.bin.set_state(gst.STATE_PLAYING);

    def on_sync_message(self, bus, message):
        t = message.type;
        #if message.structure:
        #    print "Sync Message: %d %s" % (t, message.structure.to_string());
        #else:
        #    print "Sync Message: %d" % t;

    def on_message(self, bus, message):
        t = message.type;
        #if message.structure:
        #    print "Message: %d %s" % (t, message.structure.to_string());
        #else:
        #    print "Message: %d" % t;
        if t == gst.MESSAGE_ERROR:
            err, debug = message.parse_error()
            print "Error: %s" % err, debug
            self.bin.set_state (gst.STATE_NULL);
        elif t == gst.MESSAGE_EOS:
            print "EOS"
            self.bin.set_state (gst.STATE_NULL);
            sys.exit(0);

    def end(self):
        self.bin.set_state (gst.STATE_NULL);

    def seek(self, location):
        gst.debug("seeking to %r" % location);
        event = gst.event_new_seek(1.0, gst.FORMAT_TIME,
                gst.SEEK_FLAG_FLUSH | gst.SEEK_FLAG_ACCURATE,
                gst.SEEK_TYPE_SET, location,
                gst.SEEK_TYPE_SET, location + length*gst.SECOND);

        res = self.seeker.send_event(event);
        if not res:
            gst.error("seek to %r failed" % location)

    def demux_pad_added(self, element, pad, bool):
        caps = pad.get_caps();

        structure = caps[0];
        if structure.get_name() == "video/x-raw-yuv":
            if playback:
                videorate = gst.element_factory_make("videorate");
                self.bin.add (videorate);
                videorate.set_state (gst.STATE_PLAYING);
                pad.link (videorate.get_pad("sink"));

                xvimagesink = gst.element_factory_make("xvimagesink");
                self.seeker = xvimagesink;
                self.bin.add (xvimagesink);
                xvimagesink.set_state (gst.STATE_PLAYING);
                videorate.link (xvimagesink,
                        gst.caps_from_string("video/x-raw-yuv,framerate=%d/1" % fps));
            else:
                queue = gst.element_factory_make("queue");
                self.bin.add (queue);
                queue.set_state (gst.STATE_PLAYING);
                pad.link (queue.get_pad("sink"));

                videorate = gst.element_factory_make("videorate");
                self.bin.add (videorate);
                videorate.set_state (gst.STATE_PLAYING);
                queue.get_pad("src").link (videorate.get_pad("sink"));

                schroenc = gst.element_factory_make("schroenc");
                schroenc.set_property ("rate-control", rate_control);
                schroenc.set_property ("bitrate", bitrate);
                #schroenc.set_property ("psnr", psnr);
                #schroenc.set_property ("quant-engine", quant_engine);
                #schroenc.set_property ("intra-wavelet", intra_wavelet);
                #schroenc.set_property ("transform-depth", transform_depth);
                #schroenc.set_property ("md5", 1);
                #schroenc.set_property ("enable-phasecorr-prediction", 1);
                #schroenc.set_property ("enable-hierarchical-prediction", 0);
                #schroenc.set_property ("mv-precision", 1);
                self.seeker = schroenc;
                self.bin.add (schroenc);
                schroenc.set_state (gst.STATE_PLAYING);
                videorate.link (schroenc,
                        gst.caps_from_string("video/x-raw-yuv,framerate=%d/1" % fps));

                oggmux = gst.element_factory_make("oggmux");
                self.oggmux = oggmux;
                self.bin.add (oggmux);
                oggmux.set_state (gst.STATE_PLAYING);
                schroenc.get_pad("src").link(oggmux.get_pad("sink_%d"));

                filesink = gst.element_factory_make("filesink");
                fn = "output" + self.suffix + ".ogg";
                print fn;
                filesink.set_property ("location", fn);
                self.bin.add (filesink);
                filesink.set_state (gst.STATE_PLAYING);
                oggmux.get_pad("src").link(filesink.get_pad("sink"));
            self.got_video = 1;
            #self.seek(seek_time*gst.SECOND);
        elif structure.get_name() == "audio/x-raw-float" or structure.get_name() == "audio/x-raw-int":
            if self.audio_channel == audiochan:
                if playback:
                    audioconvert = gst.element_factory_make ("audioconvert");
                    self.bin.add (audioconvert);
                    audioconvert.set_state (gst.STATE_PLAYING);
                    alsasink = gst.element_factory_make ("alsasink");
                    self.bin.add (alsasink);
                    alsasink.set_state (gst.STATE_PLAYING);
                    pad.link (audioconvert.get_pad("sink"));
                    audioconvert.get_pad("src").link(alsasink.get_pad("sink"));
                else:
                    queue = gst.element_factory_make("queue");
                    self.bin.add (queue);
                    queue.set_state (gst.STATE_PLAYING);
                    pad.link (queue.get_pad("sink"));

                    audioconvert = gst.element_factory_make ("audioconvert");
                    self.bin.add (audioconvert);
                    audioconvert.set_state (gst.STATE_PLAYING);
                    queue.get_pad("src").link (audioconvert.get_pad("sink"));

                    vorbisenc = gst.element_factory_make ("vorbisenc");
                    self.bin.add (vorbisenc);
                    vorbisenc.set_state (gst.STATE_PLAYING);
                    audioconvert.get_pad("src").link(vorbisenc.get_pad("sink"));
                    vorbisenc.get_pad("src").link(self.oggmux.get_pad("sink_%d"));

            self.audio_channel+=1
        else:
            print "unknown stream";


def main(args):
    if len(args) > 1:
        suffix="-" + args[1];
        print suffix
    else:
        suffix="";

    moo = Moo(suffix);

    try:
        mainloop.run();
    except KeyboardInterrupt:
        pass

    moo.end();
    moo = 0;

if __name__ == '__main__':
    sys.exit(main(sys.argv))

