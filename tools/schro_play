#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk
import gtk.gdk
import gobject

import pygst
pygst.require('0.10')
import gst
import gst.interfaces

import sys
import struct
import os

class VideoWidget(gtk.DrawingArea):
    def __init__(self):
        gtk.DrawingArea.__init__(self)

        self.imagesink = None
        self.set_flags(gtk.DOUBLE_BUFFERED)
	self.width = 500
	self.height = 240

        self.is_playing = False
        self.player = gst.element_factory_make("playbin", "player")
	self.videosink = gst.parse_bin_from_description("framestore ! xvimagesink qos=false", True)
	self.framestore = self.videosink.get_by_name("framestore0")
	self.imagesink = self.videosink.get_by_name("xvimagesink0")
	self.player.set_property("video-sink", self.videosink)
        self.on_eos = False
	self.toplevel = None
	self.toplevel_signal_handle = 0

	style = self.style.copy()
	style.bg[gtk.STATE_NORMAL] = gtk.gdk.Color(0,0,0)
	self.set_style(style)

        bus = self.player.get_bus()
        bus.enable_sync_message_emission()
        bus.add_signal_watch()
        bus.connect('sync-message::element', self.on_sync_message)
        bus.connect('message', self.on_message)

        #self.connect('expose_event', lambda x,y: self.do_expose_event(x,y))
        self.connect_object('expose_event', self.do_expose_event, self)
        self.connect('hierarchy_changed', lambda *x: self.do_hierarchy_changed_event(x))
        self.connect('property_notify_event', lambda *x: self.do_property_notify_event(x))
        self.connect('size_request', self.do_size_request)

    def on_sync_message(self, bus, message):
	#print 'got sync message %s' % message.structure;
        if message.structure is None:
            return
        if message.structure.get_name() == 'prepare-xwindow-id':
            self.set_sink(message.src)
            message.src.set_property('force-aspect-ratio', True)
            
    def on_message(self, bus, message):
	#print 'got message %s' % message.structure;
        t = message.type
        if t == gst.MESSAGE_ERROR:
            err, debug = message.parse_error()
            print "Error: %s" % err, debug
            if self.on_eos:
                self.on_eos()
            self.playing = False
        elif t == gst.MESSAGE_EOS:
            if self.on_eos:
                self.on_eos()
            self.playing = False

    def set_location(self, location):
	print 'setting location %s' % location
        self.player.set_property('uri', location)
	self.set_playing(False)
	self.player.set_state(gst.STATE_PLAYING)
	self.framestore.set_property("step", True)

    def query_position(self):
        try:
            position, format = self.player.query_position(gst.FORMAT_TIME)
        except:
            position = gst.CLOCK_TIME_NONE

        return position

    def query_duration(self):
        try:
            duration, format = self.player.query_duration(gst.FORMAT_TIME)
        except:
            duration = gst.CLOCK_TIME_NONE

        return duration

    def seek(self, location, accurate=False):
        """
        @param location: time to seek to, in nanoseconds
        """
        print("seeking to %r" % location)
	accurate_flag = 0
	if accurate:
	    accurate_flag = gst.SEEK_FLAG_ACCURATE
        event = gst.event_new_seek(1.0, gst.FORMAT_TIME,
            gst.SEEK_FLAG_FLUSH | accurate_flag,
            gst.SEEK_TYPE_SET, location,
            gst.SEEK_TYPE_NONE, 0)

        res = self.player.send_event(event)
        if res:
            print("setting new stream time to 0")
            self.player.set_new_stream_time(0L)
        else:
            print("seek to %r failed" % location)

    def seekcur(self, location, accurate=False):
        """
        @param location: time to seek to, in nanoseconds
        """
        print("seeking to %r" % location)
	accurate_flag = 0
	if accurate:
	    accurate_flag = gst.SEEK_FLAG_ACCURATE
        event = gst.event_new_seek(1.0, gst.FORMAT_TIME,
            gst.SEEK_FLAG_FLUSH | accurate_flag,
            gst.SEEK_TYPE_CUR, location,
            gst.SEEK_TYPE_NONE, 0)

        res = self.player.send_event(event)
        if res:
            print("setting new stream time to 0")
            self.player.set_new_stream_time(0L)
        else:
            print("seek to %r failed" % location)

    def toplevel_configure_event(self,event):
	"Signal handler for notification of movement of toplevel window"
        self.queue_draw_area(0,0,1,1)
        return False

    def do_size_request(self, req, moo=None):
	req.width = self.width
	req.height = self.height

    def do_hierarchy_changed_event(self,event):
	if self.toplevel:
	    self.toplevel.disconnect(self.toplevel_signal_handle);
	self.toplevel = self.get_toplevel()
	self.toplevel_signal_handle = self.toplevel.connect('configure_event',
			    lambda *x: self.toplevel_configure_event(x))

    def do_expose_event(self,src,event=None):
	if event == None:
	    # FIXME Sometimes a signal comes in with the wrong number of
	    # arguments, with src==the event and event=None.
	    event = src
	    src = None
        if self.imagesink:
            self.imagesink.expose()
        return False

    def set_sink(self, sink):
        assert self.window.xid
        self.imagesink = sink
        self.unset_flags(gtk.DOUBLE_BUFFERED)
        self.imagesink.set_xwindow_id(self.window.xid)

    def set_playing(self, value):
        self.is_playing = value;
	if value:
	    self.framestore.set_property("stepping", False)
	else:
	    self.framestore.set_property("stepping", True)

    def jump_back(self):
	print "not supported"

    def step_forward(self):
	self.framestore.set_property("step", True)

    def step_back(self):
	print "not supported"

    def get_state(self, timeout=1):
        return self.player.get_state(timeout=timeout)

    def is_playing(self):
        return self.is_playing;

    def get_frame_number(self):
	if self.framestore:
	    return self.framestore.get_property("frame-number");
	return 1234;
    
class Player(gtk.Window):
    def __init__(self):
        gtk.Window.__init__(self)

	self.is_playing = False;
	self.at_beginning = True;
	self.at_end = False
	self.have_media = False
	self.is_fullscreen = False
	self.update_id = -1

        self.videowidget = VideoWidget()
        self.create_ui()
        self.show_all()

        def on_eos():
            self.videowidget.seek(0L)
            self.toggle_playpause()
        #self.videowidget.on_eos = lambda *x: on_eos()
        
        self.changed_id = -1
        self.seek_timeout_id = -1

	self.update_id = gobject.timeout_add(10, self.update_label)

        self.connect('delete-event', lambda *x: gtk.main_quit())

    def create_ui(self):
        vbox = gtk.VBox()
        self.add(vbox)

	self.accelgroup = gtk.AccelGroup()
	self.add_accel_group (self.accelgroup)

        self.menubar = gtk.MenuBar()
        vbox.pack_start(self.menubar, expand=False)

	gtk.accel_map_add_entry("<SchroPlay>/File/Open", ascii('o'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/File/Close", ascii('w'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/File/Quit", ascii('q'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/Edit/Cut", ascii('x'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/Edit/Copy", ascii('c'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/Edit/Paste", ascii('v'), gtk.gdk.CONTROL_MASK)
	gtk.accel_map_add_entry("<SchroPlay>/Help/Contents", 0xffbe, 0)

        file = gtk.MenuItem("_File")
        self.menubar.append(file)
        filemenu = gtk.Menu()
        file.set_submenu(filemenu)
	file_open = gtk.ImageMenuItem(gtk.STOCK_OPEN)
        file_open.connect('activate', lambda *x: self.open())
        file_open.set_accel_path('<SchroPlay>/File/Open')
        filemenu.append(file_open)
        file_close = gtk.ImageMenuItem(gtk.STOCK_CLOSE)
	file_close.set_sensitive(False)
        filemenu.append(file_close)
        filemenu.append(gtk.SeparatorMenuItem())
        file_quit = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        file_quit.connect('activate', lambda *x: gtk.main_quit())
        filemenu.append(file_quit)
	filemenu.set_accel_path("<SchroPlay>/File")
	filemenu.set_accel_group(self.accelgroup)

        edit = gtk.MenuItem("_Edit")
        self.menubar.append(edit)
	editmenu = gtk.Menu()
	edit.set_submenu(editmenu)
	edit_cut = gtk.ImageMenuItem(gtk.STOCK_CUT)
	edit_cut.set_sensitive(False)
	editmenu.append(edit_cut)
	edit_copy = gtk.ImageMenuItem(gtk.STOCK_COPY)
	editmenu.append(edit_copy)
	edit_copy.set_sensitive(False)
	edit_paste = gtk.ImageMenuItem(gtk.STOCK_PASTE)
	edit_paste.set_sensitive(False)
	editmenu.append(edit_paste)
        editmenu.append(gtk.SeparatorMenuItem())
	self.edit_fullscreen = gtk.CheckMenuItem("Fullscreen")
	self.edit_fullscreen.connect('activate', self.toggle_fullscreen)
	editmenu.append(self.edit_fullscreen)
	editmenu.set_accel_path("<SchroPlay>/Edit")
	editmenu.set_accel_group(self.accelgroup)

        help = gtk.MenuItem("_Help")
        self.menubar.append(help)
        helpmenu = gtk.Menu()
	help.set_submenu(helpmenu)
	help_contents = gtk.ImageMenuItem(gtk.STOCK_HELP)
	help_contents.get_child().set_label("_Contents")
	help_contents.connect('activate', lambda *x: self.help_contents())
	helpmenu.append(help_contents)
	help_about = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
	help_about.connect('activate', lambda *x: self.help_about())
	helpmenu.append(help_about)
	helpmenu.set_accel_path("<SchroPlay>/Help")
	helpmenu.set_accel_group(self.accelgroup)

        vbox.pack_start(self.videowidget, expand=True)
        
        hbox = gtk.HBox()
        vbox.pack_start(hbox, expand=False)
        
        self.pause_image = gtk.image_new_from_stock(gtk.STOCK_MEDIA_PAUSE,
                                                    gtk.ICON_SIZE_BUTTON)
        self.pause_image.show()
        self.play_image = gtk.image_new_from_stock(gtk.STOCK_MEDIA_PLAY,
                                                   gtk.ICON_SIZE_BUTTON)
        self.play_image.show()
        self.button = button = gtk.Button()
        button.add(self.play_image)
        button.set_property('can-default', True)
        button.set_focus_on_click(False)
        button.show()
        hbox.pack_start(button, False)
        button.set_property('has-default', True)
        button.connect('clicked', lambda *args: self.toggle_playpause())

	hbox.pack_start(gtk.SeparatorToolItem(), False)

	self.jumpback_button = gtk.Button()
	self.jumpback_button.add(gtk.image_new_from_stock(gtk.STOCK_UNDO,
				gtk.ICON_SIZE_BUTTON))
        self.jumpback_button.connect('clicked', self.do_jumpback)
        hbox.pack_start(self.jumpback_button, False)

	self.back_button = gtk.Button()
	self.back_button.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_REWIND,
				gtk.ICON_SIZE_BUTTON))
        self.back_button.connect('clicked', self.do_stepback)
        hbox.pack_start(self.back_button, False)

	self.forward_button = gtk.Button()
	self.forward_button.add(gtk.image_new_from_stock(gtk.STOCK_MEDIA_FORWARD,
				gtk.ICON_SIZE_BUTTON))
        self.forward_button.connect('clicked', self.do_stepforward)
        hbox.pack_start(self.forward_button, False)

	self.update_playpause()
        
	self.position_label = gtk.Label('0')
        hbox.pack_start(self.position_label)

    def open(self):
        fc = gtk.FileChooserDialog("Open File", None,
	    gtk.FILE_CHOOSER_ACTION_OPEN,
            (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
	    gtk.STOCK_OPEN, gtk.RESPONSE_ACCEPT))
	fc.run()
	self.open_file(fc.get_filename())
	fc.destroy()

    def open_file(self,filename):
	if filename[0] == '/':
	    uri = 'file://' + filename
	else:
	    uri = 'file://' + os.getcwd() + '/' + filename
	self.videowidget.set_location(uri)
	self.have_media = True
	self.update_playpause()

    def toggle_fullscreen(self,moo=None):
	self.is_fullscreen = not self.is_fullscreen
	self.edit_fullscreen.set_active(self.is_fullscreen)
	if self.is_fullscreen:
	    self.fullscreen()
	else:
	    self.unfullscreen()

    def help_conents(self):
        print 'help::contents\n'

    def help_about(self):
	dialog = gtk.AboutDialog()
	dialog.set_program_name('SchroPlay')
	dialog.set_version('0.0.0')
	dialog.set_copyright('Copyright 2007 David A. Schleef')
	dialog.set_license('LGPL')
	dialog.set_authors(('David A. Schleef',''))
	dialog.run()
	dialog.destroy()

    def update_label(self):
	frame_number = self.videowidget.get_frame_number();
	label_value = "%d" % (frame_number);
	self.position_label.set_text(label_value)
	return True

    def update_playpause(self):
        self.button.remove(self.button.child)
        if self.is_playing:
            self.button.add(self.pause_image)
        else:
            self.button.add(self.play_image)
	self.button.set_sensitive(self.have_media)
	self.jumpback_button.set_sensitive(self.have_media)
	self.back_button.set_sensitive(self.have_media and not self.at_beginning)
	self.forward_button.set_sensitive(self.have_media and not self.at_end)

    def set_playpause(self,value):
	if self.is_playing == value:
	    return
	self.is_playing = value
	self.videowidget.set_playing(value)
	self.update_playpause()

    def toggle_playpause(self):
	self.set_playpause(not self.is_playing)

    def do_jumpback(self,moo):
	self.videowidget.jump_back()

    def do_stepforward(self,moo):
	self.set_playpause(False)
	self.videowidget.step_forward()

    def do_stepback(self,moo):
	self.set_playpause(False)
	self.videowidget.step_back()


def ascii(s):
	return struct.unpack('b',s[0])[0];

def main(args):
    def usage():
        sys.stderr.write("usage: %s URI-OF-MEDIA-FILE\n" % args[0])
        sys.exit(1)

    gobject.threads_init()

    # Need to register our derived widget types for implicit event
    # handlers to get called.
    gobject.type_register(Player)
    gobject.type_register(VideoWidget)

    player = Player()

    if len(args) > 1:
    	player.open_file(args[1])

    #if not gst.uri_is_valid(args[1]):
    #    sys.stderr.write("Error: Invalid URI: %s\n" % args[1])
    #    sys.exit(1)

    #w.load_file(args[1])

    gtk.main()

if __name__ == '__main__':
    sys.exit(main(sys.argv))

